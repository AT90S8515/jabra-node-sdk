# We need some comments here

trigger:
  branches:
    include:
    - '*'
    exclude:
      - refs/tags/*

stages:
# - stage: build
#   jobs:
#   - job: linux
#     pool:
#       vmImage: 'ubuntu-latest'

#     steps:
#     - checkout: self
#       fetchDepth: 3

#     - script: |
#         sudo apt-get update
#         sudo apt-get install gcc
#       displayName: Install dependencies

#     - script: |
#         cd $(Build.SourcesDirectory)/nodesdk
#         npm install
#       displayName: Initialize

#     - script: |
#         cd $(Build.SourcesDirectory)/nodesdk
#         npx node-gyp rebuild
#       displayName: Build NAPI C++

#     - script: |
#         cd $(Build.SourcesDirectory)/nodesdk
#         npm run tsc
#       displayName: Compiling TypeScript

#     - script: |
#         cd $(Build.SourcesDirectory)/nodesdk
#         npm run generatemeta
#       displayName: Generating meta info for testing

#   - job: windows
#     pool:
#       vmImage: 'windows-latest'

#     steps:
#     - checkout: self
#       fetchDepth: 3

#     - script: |
#         cd $(Build.SourcesDirectory)/nodesdk
#         npm install
#       displayName: Initialize

#     - script: |
#         cd $(Build.SourcesDirectory)/nodesdk
#         npx node-gyp rebuild
#       displayName: Build NAPI C++

#     - script: |
#         cd $(Build.SourcesDirectory)/nodesdk
#         npm run tsc
#       displayName: Compiling TypeScript

#     - script: |
#         cd $(Build.SourcesDirectory)/nodesdk
#         npm run generatemeta
#       displayName: Generating meta info for testing

#   - job: mac
#     pool:
#       vmImage: 'macos-latest'

#     steps:
#     - checkout: self
#       fetchDepth: 3

#     - script: |
#         cd $(Build.SourcesDirectory)/nodesdk
#         npm install
#       displayName: Initialize

#     - script: |
#         cd $(Build.SourcesDirectory)/nodesdk
#         npx node-gyp rebuild
#       displayName: Build NAPI C++

#     - script: |
#         cd $(Build.SourcesDirectory)/nodesdk
#         npm run tsc
#       displayName: Compiling TypeScript

#     - script: |
#         cd $(Build.SourcesDirectory)/nodesdk
#         npm run generatemeta
#       displayName: Generating meta info for testing

#   - job: audit
#     displayName: Npm-auditing packages
#     dependsOn: linux

#     steps:
#     - script: |
#         cd $(Build.SourcesDirectory)/nodesdk
#         npm audit
#       displayName: Npm audit

- stage: testapp
  jobs:

  - job: linux
    displayName: Starting testapp on Linux

    steps:
    - script: |
        sudo apt-get update
        sudo apt-get install xvfb
      displayName: Initializing environment

    - script: |
        cd $(Build.SourcesDirectory)/nodesdk
        npm install
        # This produces a nodesdk tarball package and saves the filename into
        # the variable
        NODESDK_TARBALL="$(npm pack . 2>&1 | grep 'npm notice filename:' \
            | cut -f 2 -d ':' | xargs)"
        cp "$NODESDK_TARBALL" $(Build.SourcesDirectory)/testapp
        cd $(Build.SourcesDirectory)/testapp
        npm install --save "$NODESDK_TARBALL"
      displayName: Making testapp depend on the current nodesdk

    - script: |
        cd $(Build.SourcesDirectory)/testapp
        npm install
      displayName: Installing testapp dependencies

    - script: |
        cd $(Build.SourcesDirectory)/testapp
        timeout 15s xvfb-run -s '-screen 0 1024x768x24' npm run start
      displayName: Starting testapp

  - job: mac
    displayName: Starting testapp on Mac

    pool:
      vmImage: 'macos-latest'

    steps:
    - script: |
        cd $(Build.SourcesDirectory)/nodesdk
        npm install
        # This produces a nodesdk tarball package and saves the filename into
        # the variable
        NODESDK_TARBALL="$(npm pack . 2>&1 | grep 'npm notice filename:' \
            | cut -f 2 -d ':' | xargs)"
        cp "$NODESDK_TARBALL" $(Build.SourcesDirectory)/testapp
        cd $(Build.SourcesDirectory)/testapp
        npm install --save "$NODESDK_TARBALL"
      displayName: Making testapp depend on the current nodesdk

    - script: |
        cd $(Build.SourcesDirectory)/testapp
        npm install
      displayName: Installing testapp dependencies

    - script: |
        cd $(Build.SourcesDirectory)/testapp
        timeout npm run start
      displayName: Starting testapp
